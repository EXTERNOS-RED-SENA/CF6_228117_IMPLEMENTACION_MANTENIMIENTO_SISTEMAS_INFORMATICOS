{"remainingRequest":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema3.vue?vue&type=template&id=715d0cf6&lang=pug","dependencies":[{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/src/views/Tema3.vue","mtime":1732755802620},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/RED6_IMPLEMENTACION_MANTENIMIENTO_SISTEMAS_INFORMATICOS/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDMKICAgICAgaDEgTWFudGVuaW1pZW50byBkZSBpbmZyYWVzdHJ1Y3R1cmEKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgLnAtNC5qMQogICAgICAgICAgcC5tYi0wICBFbCBtYW50ZW5pbWllbnRvIGRlIGluZnJhZXN0cnVjdHVyYSBzZSByZWZpZXJlIGEgbGFzIGFjdGl2aWRhZGVzIHkgcHJvY2Vzb3MgbmVjZXNhcmlvcyBwYXJhIGFzZWd1cmFyIHF1ZSBsb3Mgc2lzdGVtYXMgeSBjb21wb25lbnRlcyBkZSB1bmEgaW5mcmFlc3RydWN0dXJhIGZ1bmNpb25lbiBkZSBtYW5lcmEgw7NwdGltYSB5IGVmaWNpZW50ZSBhIGxvIGxhcmdvIGRlbCB0aWVtcG8uIEVzdG8gaW5jbHV5ZSBsYSBpbnNwZWNjacOzbiwgcmVwYXJhY2nDs24sIGFjdHVhbGl6YWNpw7NuIHkgcmVlbXBsYXpvIGRlIGVxdWlwb3MgeSBtYXRlcmlhbGVzIHBhcmEgcHJldmVuaXIgZmFsbG9zIHkgZ2FyYW50aXphciBlbCByZW5kaW1pZW50byBjb250aW51byBkZSBsYSBpbmZyYWVzdHJ1Y3R1cmEuCgogICAgICAuY29sLWxnLWF1dG8KICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNC5wbmcnIGFsdD0nJykgIAogICAgICAgIAogICAgU2VwYXJhZG9yIAogICAgI3RfM18xLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgaDIgMy4xIE1hbnRlbmltaWVudG8gcHJldmVudGl2byAgICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmc3LnAtNC5tYi00CiAgICAgIC5jb2wtbGctYXV0bwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM1LnBuZycgYWx0PScnKSAgICAgICAKICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQuajEgICAgICAgIAogICAgICAgIHAubWItMCBMYSBjb25leGnDs24gY29uIGJhc2VzIGRlIGRhdG9zIHJlcHJlc2VudGEgdW5vIGRlIGxvcyBhc3BlY3RvcyBwcmltYXJpb3MgZW4gbGEgb2J0ZW5jacOzbiBkZSBkYXRvcyBwYXJhIGFuw6FsaXNpcy4gRXN0ZSBwcm9jZXNvIHJlcXVpZXJlIHVuIGVuZm9xdWUgc2lzdGVtw6F0aWNvIHF1ZSBhYmFyY2EgZGVzZGUgbGEgY29uZmlndXJhY2nDs24gaW5pY2lhbCBoYXN0YSBsYSBlamVjdWNpw7NuIGRlIGNvbnN1bHRhcyBjb21wbGVqYXMsIGFzZWd1cmFuZG8gZW4gdG9kbyBtb21lbnRvIGxhIGVmaWNpZW5jaWEgeSBzZWd1cmlkYWQgZW4gZWwgYWNjZXNvIGEgbG9zIGRhdG9zLiBMYSBUYWJsYSAyIGJyaW5kYSBsYSBpbmZvcm1hY2nDs24gc29icmUgY8OzbW8gZWZlY3R1YXIgdW4gbWFudGVuaW1pZW50byBwcmV2ZW50aXZvIGFkZWN1YWRvLiAgICAgIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAuY29sLWxnLTEyCiAgICAgICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tYm90b25lcwogICAgICAgICAgaDUgVGFibGEgMi4gCiAgICAgICAgICBzcGFuIEFjdGl2aWRhZGVzIGRlIG1hbnRlbmltaWVudG8gcHJldmVudGl2bwogICAgICAgIC50YWJsYS1hLmNvbG9yLWFjZW50by1ib3RvbmVzLnRleHQtY2VudGVyLm1iLTUKICAgICAgICAgIHRhYmxlCiAgICAgICAgICAgIGNhcHRpb24gRnVlbnRlOiBPSVQsIDIwMjQuCiAgICAgICAgICAgIHRoZWFkCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRoIEFjdGl2aWRhZAogICAgICAgICAgICAgICAgdGggVmVyaWZpY2FjacOzbiAgCiAgICAgICAgICAgICAgICB0aCBQcnVlYmFzIAoKICAgICAgICAgICAgdGJvZHkKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQuZmFzdC1ib2xkLmJndDEgSW5zcGVjY2nDs24gZGUgY2FibGVzCiAgICAgICAgICAgICAgICB0ZCBJbnNwZWNjaW9uYXIgbG9zIGNhYmxlcyBwYXJhIGRldGVjdGFyIGN1YWxxdWllciBzaWdubyBkZSBkZXNnYXN0ZSwgY29tbyBjb3J0ZXMsIGFicmFzaW9uZXMgbyBkYcOxb3MgZW4gbGEgY3ViaWVydGEgZXh0ZXJuYS4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBVdGlsaXphciBlcXVpcG9zIGRlIHRlc3RlbyBwYXJhIHZlcmlmaWNhciBsYSBjb250aW51aWRhZCBlbMOpY3RyaWNhIGRlIGxvcyBjYWJsZXMgeSBkZXRlY3RhciBwb3NpYmxlcyBjb3J0b2NpcmN1aXRvcyBvIGNhYmxlcyBhYmllcnRvcy4KCiAgICAgICAgICAgICAgdHIKICAgICAgICAgICAgICAgIHRkLmZhc3QtYm9sZC5iZ3QxIEluc3BlY2Npw7NuIGRlIGNvbmVjdG9yZXMKICAgICAgICAgICAgICAgIHRkIEluc3BlY2Npb25hciBsb3MgcGluZXMgZGUgbG9zIGNvbmVjdG9yZXMgUkotNDUgcGFyYSBhc2VndXJhciBxdWUgbm8gZXN0w6luIGRvYmxhZG9zLCByb3RvcyBvIHN1Y2lvcy4gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0ZCBVdGlsaXphciBlcXVpcG9zIGRlIHRlc3RlbyBwYXJhIHZlcmlmaWNhciBxdWUgbG9zIGNvbmVjdG9yZXMgZXN0w6luIGNvcnJlY3RhbWVudGUgY29uZWN0YWRvcyB5IHF1ZSBubyBoYXlhIHByb2JsZW1hcyBkZSBjb25lY3RpdmlkYWQuIAoKICAgICAgICAgICAgICB0cgogICAgICAgICAgICAgICAgdGQuZmFzdC1ib2xkLmJndDEgSW5zcGVjY2nDs24gZGUgZXF1aXBvcyBkZSByZWQKICAgICAgICAgICAgICAgIHRkIEluc3BlY2Npb25hciBsb3MgI1tpIHN3aXRjaGVzIHkgcm91dGVyc10gcGFyYSBhc2VndXJhciBxdWUgZXN0w6luIGZ1bmNpb25hbmRvIGNvcnJlY3RhbWVudGUgeSBxdWUgbm8gaGF5YSBzaWdub3MgZGUgc29icmVjYWxlbnRhbWllbnRvIG8gZGHDsW8gZsOtc2ljby4gICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHRkIEFzZWd1cmFyc2UgZGUgcXVlIGxvcyBlcXVpcG9zIGRlIHJlZCB0ZW5nYW4gZWwgI1tpIGZpcm13YXJlXSBtw6FzIHJlY2llbnRlIGluc3RhbGFkbyBwYXJhIG1lam9yYXIgZWwgcmVuZGltaWVudG8geSBsYSBzZWd1cmlkYWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgcCBPdHJhcyBhY3RpdmlkYWRlcyBuZWNlc2FyaWFzIGR1cmFudGUgZWwgbWFudGVuaW1pZW50byBwcmV2ZW50aXZvLCBsYXMgY3VhbGVzIHNlIGRlYmVuIHRlbmVyIGVuIGN1ZW50YSBzaWVtcHJlIGRlc2RlIHVuYSBtaXJhZGEgZ2xvYmFsaXphZGEgc29uOgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTQKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgUHJ1ZWJhcyBkZSBSZW5kaW1pZW50byBkZWwgQ2FibGVhZG8KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgLmJnMTAucC00LmJyYWQuaC0xMDAKICAgICAgICAgIHAubWItMCBQcnVlYmFzIGRlIFRyYW5zbWlzacOzbiBkZSBEYXRvczogVXRpbGl6YXIgZXF1aXBvcyBkZSBjZXJ0aWZpY2FjacOzbiBwYXJhIHZlcmlmaWNhciBxdWUgZWwgY2FibGVhZG8gY3VtcGxhIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgY2F0ZWdvcsOtYSAoQ2F0NWUsIENhdDYsIENhdDZhLCBldGMuKSB5IHF1ZSBwdWVkYSBzb3BvcnRhciBsYXMgdmVsb2NpZGFkZXMgZGUgdHJhbnNtaXNpw7NuIGRlIGRhdG9zIHJlcXVlcmlkYXMuCgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMzYucG5nJyBhbHQ9JycpIAoKCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM3LnBuZycgYWx0PScnKSAKICAgICAgICBwICNbYiBQcnVlYmFzIGRlIEludGVyZmVyZW5jaWE6XSBWZXJpZmljYXIgcXVlIGVsIGNhYmxlYWRvIG5vIGVzdMOpIHN1ZnJpZW5kbyBpbnRlcmZlcmVuY2lhcyBlbGVjdHJvbWFnbsOpdGljYXMgcXVlIHB1ZWRhbiBhZmVjdGFyIGVsIHJlbmRpbWllbnRvIGRlIGxhIHJlZC4gICAgCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTQKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgTGltcGllemEgZGUgY3VhcnRvcyB0w6ljbmljb3MKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci50ZXh0LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNi5jb2wtbWQtOS5jb2wtMTEubWItNC5tYi14bC0wCiAgICAgICAgLmJnMTMuYnJhZC5oLTEwMAogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMzgucG5nIiwgYWx0PSJhbHQiKQogICAgICAgICAgLnAtNAogICAgICAgICAgICBoNC5tYi0zIEVsaW1pbmFjacOzbiBkZSBwb2x2byB5IHN1Y2llZGFkIAogICAgICAgICAgICBwLm1iLTAgTGltcGlhciByZWd1bGFybWVudGUgbG9zIGN1YXJ0b3MgdMOpY25pY29zIHBhcmEgZWxpbWluYXIgZWwgcG9sdm8geSBsYSBzdWNpZWRhZCBxdWUgcHVlZGVuIGFjdW11bGFyc2UgZW4gbG9zIGVxdWlwb3MgZGUgcmVkIHkgYWZlY3RhciBzdSByZW5kaW1pZW50by4KICAgICAgLmNvbC1sZy02LmNvbC1tZC05LmNvbC0xMS5tYi00Lm1iLXhsLTAKICAgICAgICAuYmcxMy5icmFkLmgtMTAwCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8zOS5wbmciLCBhbHQ9ImFsdCIpCiAgICAgICAgICAucC00CiAgICAgICAgICAgIGg0Lm1iLTMgT3JnYW5pemFjacOzbiBkZSBjYWJsZXMgCiAgICAgICAgICAgIHAubWItMCBBc2VndXJhcnNlIGRlIHF1ZSBsb3MgY2FibGVzIGVzdMOpbiBvcmdhbml6YWRvcyB5IGV0aXF1ZXRhZG9zIGNvcnJlY3RhbWVudGUgcGFyYSBmYWNpbGl0YXIgZWwgbWFudGVuaW1pZW50byB5IGxhIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcy4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIFZlcmlmaWNhY2nDs24gZGUgc2lzdGVtYXMgZGUgdmVudGlsYWNpw7NuIHkgY29udHJvbCBkZSB0ZW1wZXJhdHVyYQoKICAKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80MC5wbmcnIGFsdD0nJykgICAgICAgCiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMuajEKICAgICAgICBvbC5saXN0YS1vbC0tY3VhZHJvLmZhLXVsCiAgICAgICAgICBsaSAKICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgIHNwYW4gMQogICAgICAgICAgICBzcGFuICNbYiBJbnNwZWNjacOzbiBkZSB2ZW50aWxhZG9yZXM6XSBWZXJpZmljYXIgcXVlIGxvcyB2ZW50aWxhZG9yZXMgeSBzaXN0ZW1hcyBkZSB2ZW50aWxhY2nDs24gZXN0w6luIGZ1bmNpb25hbmRvIGNvcnJlY3RhbWVudGUgcGFyYSBhc2VndXJhciB1bmEgY2lyY3VsYWNpw7NuIGRlIGFpcmUgYWRlY3VhZGEuCiAgICAgICAgICBocgogICAgICAgICAgbGkgCiAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICBzcGFuIDIKICAgICAgICAgICAgc3BhbiAjW2IgQ29udHJvbCBkZSB0ZW1wZXJhdHVyYTpdIE1vbml0b3JlYXIgbGEgdGVtcGVyYXR1cmEgZW4gbG9zIGN1YXJ0b3MgdMOpY25pY29zIHBhcmEgYXNlZ3VyYXIgcXVlIGVzdMOpIGRlbnRybyBkZSBsb3MgcmFuZ29zIGFkZWN1YWRvcyB5IHF1ZSBubyBoYXlhIHNvYnJlY2FsZW50YW1pZW50byBkZSBsb3MgZXF1aXBvcyBkZSByZWQuCiAgICAgICAgICBociAgICAKCiAgICBTZXBhcmFkb3IgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgICN0XzNfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgICBoMiAzLjIgUmVzb2x1Y2nDs24gZGUgcHJvYmxlbWFzICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5iZzEucC00LmJyYWQubWItNAogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQxLnBuZycgYWx0PScnKQogICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgcC5tYi0wIExhIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcyBlcyBuZWNlc2FyaWEgcGFyYSBlbCBtYW50ZW5pbWllbnRvIGRlIGxhIGluZnJhZXN0cnVjdHVyYSBkZSBjYWJsZWFkbyBlc3RydWN0dXJhZG8uIEN1YW5kbyBzZSBkZXRlY3RhIHVuIHByb2JsZW1hLCBzZSBkZWJlIGlkZW50aWZpY2FyIHkgc29sdWNpb25hciBsYSBjYXVzYSByYcOteiBkZSBtYW5lcmEgcsOhcGlkYSB5IGVmaWNpZW50ZS4gRXN0byBwdWVkZSBpbmNsdWlyIGxhIHJlcGFyYWNpw7NuIGRlIGNhYmxlcyBkYcOxYWRvcywgbGEgc3VzdGl0dWNpw7NuIGRlIGNvbmVjdG9yZXMgZGVmZWN0dW9zb3MgeSBsYSByZWNvbmZpZ3VyYWNpw7NuIGRlIGVxdWlwb3MgZGUgcmVkLgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTUKICAgICAgICAgIC5jb2wtYXV0bwogICAgICAgICAgICAubGlzdAogICAgICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycsIGFsdD0nJykKICAgICAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgICAgICBoMy5tYi0xIFJlcGFyYWNpw7NuIGRlIGNhYmxlcyBkYcOxYWRvcwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy02Lm15LWxnLTAubXktMwogICAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQzLnBuZycgYWx0PScnKQogICAgICAgICAgICBwLm1iLTAgI1tiIElkZW50aWZpY2FjacOzbiBkZWwgcHJvYmxlbWE6XSBVdGlsaXphciBlcXVpcG9zIGRlIHRlc3RlbyBwYXJhIGlkZW50aWZpY2FyIGVsIGNhYmxlIGRhw7FhZG8geSBsb2NhbGl6YXIgZWwgcHVudG8gZGUgZGHDsW8uCiAgICAgICAgICAuY29sLWxnLTYubXktbGctMC5teS0zCiAgICAgICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDQucG5nJyBhbHQ9JycpCiAgICAgICAgICAgIHAubWItMCAjW2IgUmVwYXJhY2nDs246XSBSZXBhcmFyIGVsIGNhYmxlIGRhw7FhZG8gbyByZWVtcGxhemFybG8gcG9yIHVubyBudWV2byBwYXJhIGFzZWd1cmFyIGxhIGNvbnRpbnVpZGFkIGRlbCBzZXJ2aWNpbyBkZSByZWQuCgogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDIucG5nJyBhbHQ9JycpICAgCgogICAgLnJvdy5iZzQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgIC5weC1sZy01LnB4LTQKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS01CiAgICAgICAgICAuY29sLWF1dG8KICAgICAgICAgICAgLmxpc3QKICAgICAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAgICAgLmxpc3RfX2l0ZW1fX2ljb24KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICAgICAgaDMubWItMSBTdXN0aXR1Y2nDs24gZGUgY29uZWN0b3JlcyBkZWZlY3R1b3NvcyAgICAKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMy5kLW5vbmUuZC1sZy1ibG9jay5qMSAKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDUucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy05CiAgICAgICAgICAgIC5iZzUuYnJhZC5wLTQuaC0xMDAuajEKICAgICAgICAgICAgICBTbHlkZXJBKHRpcG89ImIiKQogICAgICAgICAgICAgICAgLmJndy5zaGEuYnJhZDEucC00LmgtMTAwCiAgICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ2LnBuZycgYWx0PScnKSAgCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaDUgSWRlbnRpZmljYWNpw7NuIGRlbCBwcm9ibGVtYQogICAgICAgICAgICAgICAgICAgICAgcC5tYi0wIFV0aWxpemFyIGVxdWlwb3MgZGUgdGVzdGVvIHBhcmEgaWRlbnRpZmljYXIgY29uZWN0b3JlcyBkZWZlY3R1b3NvcyBxdWUgcHVlZGFuIGVzdGFyIGNhdXNhbmRvIHByb2JsZW1hcyBkZSBjb25lY3RpdmlkYWQuICAgCiAgICAgICAgICAgICAgICAuYmd3LnNoYS5icmFkMS5wLTQuaC0xMDAKICAgICAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAgICAgICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgICAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDYucG5nJyBhbHQ9JycpICAKICAgICAgICAgICAgICAgICAgICAuY29sLWxnLTgubXktbGctMC5teS0zCiAgICAgICAgICAgICAgICAgICAgICBoNSBTdXN0aXR1Y2nDs24KICAgICAgICAgICAgICAgICAgICAgIHAubWItMCBSZWVtcGxhemFyIGxvcyBjb25lY3RvcmVzIGRlZmVjdHVvc29zIHBvciBudWV2b3MgY29uZWN0b3JlcyBkZSBhbHRhIGNhbGlkYWQgcGFyYSBhc2VndXJhciB1bmEgY29uZXhpw7NuIHNlZ3VyYSB5IGNvbmZpYWJsZS4gCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTUKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgUmVjb25maWd1cmFjacOzbiBkZSBlcXVpcG9zIGRlIHJlZAoKICAKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80Ny5wbmcnIGFsdD0nJykgICAgICAgCiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMuajEKICAgICAgICBvbC5saXN0YS1vbC0tY3VhZHJvLmZhLXVsCiAgICAgICAgICBsaSAKICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YQogICAgICAgICAgICAgIHNwYW4gMQogICAgICAgICAgICBzcGFuICNbYiBJZGVudGlmaWNhY2nDs24gZGVsIHByb2JsZW1hOl0gVXRpbGl6YXIgaGVycmFtaWVudGFzIGRlIGRpYWduw7NzdGljbyBwYXJhIGlkZW50aWZpY2FyIHByb2JsZW1hcyBkZSBjb25maWd1cmFjacOzbiBlbiBzd2l0Y2hlcywgcm91dGVycyB5IG90cm9zIGVxdWlwb3MgZGUgcmVkLgogICAgICAgICAgaHIKICAgICAgICAgIGxpIAogICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgc3BhbiAyCiAgICAgICAgICAgIHNwYW4gI1tiIFJlY29uZmlndXJhY2nDs246XSBSZWNvbmZpZ3VyYXIgbG9zIGVxdWlwb3MgZGUgcmVkIHBhcmEgc29sdWNpb25hciBwcm9ibGVtYXMgZGUgY29uZWN0aXZpZGFkLCByZW5kaW1pZW50byBvIHNlZ3VyaWRhZC4KICAgICAgICAgIGhyIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTUKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgVXNvIGRlIGVxdWlwb3MgZGUgdGVzdGVvIHkgY2VydGlmaWNhY2nDs24gICAgCgogICAgcCAjW2kgSWRlbnRpZmljYWNpw7NuIHkgZGlhZ27Ds3N0aWNvOl0gVXRpbGl6YXIgZXF1aXBvcyBkZSB0ZXN0ZW8geSBjZXJ0aWZpY2FjacOzbiBwYXJhIGlkZW50aWZpY2FyIHkgZGlhZ25vc3RpY2FyIHByb2JsZW1hcyBkZSBtYW5lcmEgcHJlY2lzYS4gRXN0b3MgZXF1aXBvcyBwZXJtaXRlbiByZWFsaXphciBwcnVlYmFzIGRldGFsbGFkYXMgZGVsIGNhYmxlYWRvIHkgbG9zIGVxdWlwb3MgZGUgcmVkIHBhcmEgbG9jYWxpemFyIHkgc29sdWNpb25hciBwcm9ibGVtYXMgZGUgbWFuZXJhIGVmaWNpZW50ZS4KCiAgICBTZXBhcmFkb3IgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgICN0XzNfMy50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgICBoMiAzLjMgQW1wbGlhY2nDs24gZGUgc2lzdGVtYXMKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLmJnMTQucC00LmJyYWQubWItNAogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ4LnBuZycgYWx0PScnKQogICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgcC5tYi0wIExhIGFtcGxpYWNpw7NuIGRlIHNpc3RlbWFzIGVzIG5lY2VzYXJpYSBjdWFuZG8gbGEgaW5mcmFlc3RydWN0dXJhIGRlIGNhYmxlYWRvIGVzdHJ1Y3R1cmFkbyBkZWJlIGFkYXB0YXJzZSBhIGxhcyBuZWNlc2lkYWRlcyBjYW1iaWFudGVzIGRlIGxhIG9yZ2FuaXphY2nDs24uIEVzdG8gcHVlZGUgaW5jbHVpciBsYSBhZGljacOzbiBkZSBudWV2b3MgcHVudG9zIGRlIGNvbmV4acOzbiBlbiBsYXMgw6FyZWFzIGRlIHRyYWJham8sIGxhIGV4cGFuc2nDs24gZGUgbG9zIGN1YXJ0b3MgdMOpY25pY29zIHkgbGEgYWN0dWFsaXphY2nDs24gZGUgbG9zIGVxdWlwb3MgZGUgcmVkLiBMYSBhbXBsaWFjacOzbiBkZSBzaXN0ZW1hcyBkZWJlIHJlYWxpemFyc2UgZGUgbWFuZXJhIHBsYW5pZmljYWRhIHkgY29vcmRpbmFkYSBwYXJhIG1pbmltaXphciBsYXMgaW50ZXJydXBjaW9uZXMgZW4gZWwgc2VydmljaW8gZGUgcmVkLgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTUKICAgICAgICAgIC5jb2wtYXV0bwogICAgICAgICAgICAubGlzdAogICAgICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy9pY29uLnN2ZycsIGFsdD0nJykKICAgICAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgICAgICBoMy5tYi0xIEFkaWNpw7NuIGRlIG51ZXZvcyBwdW50b3MgZGUgY29uZXhpw7NuCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTYubXktbGctMC5teS0zCiAgICAgICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDMucG5nJyBhbHQ9JycpCiAgICAgICAgICAgIHAubWItMCAjW2IgRXZhbHVhY2nDs24gZGUgbmVjZXNpZGFkZXM6XSBFdmFsdWFyIGxhcyBuZWNlc2lkYWRlcyBkZSBsYSBvcmdhbml6YWNpw7NuIHBhcmEgZGV0ZXJtaW5hciBsYSBjYW50aWRhZCB5IHViaWNhY2nDs24gZGUgbG9zIG51ZXZvcyBwdW50b3MgZGUgY29uZXhpw7NuLgogICAgICAgICAgLmNvbC1sZy02Lm15LWxnLTAubXktMwogICAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ0LnBuZycgYWx0PScnKQogICAgICAgICAgICBwLm1iLTAgI1tiIFJlcGFyYWNpw7NuOkluc3RhbGFjacOzbjpdIEluc3RhbGFyIG51ZXZvcyBjYWJsZXMgeSBjb25lY3RvcmVzIHBhcmEgcHJvcG9yY2lvbmFyIHB1bnRvcyBkZSBjb25leGnDs24gYWRpY2lvbmFsZXMgZW4gbGFzIMOhcmVhcyBkZSB0cmFiYWpvLgogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDkucG5nJyBhbHQ9JycpIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTQKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgRXhwYW5zacOzbiBkZSBjdWFydG9zIHTDqWNuaWNvcwogICAgLnJvdy5iZzQuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLnB4LWxnLTUucHgtNAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy02Lm15LTIKICAgICAgICAgICAgLmJnMTUucC00LmJyYWQuaC0xMDAKICAgICAgICAgICAgICBpbWcuaW1nLXQubWItNChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUwLnBuZycgYWx0PScnKQoKICAgICAgICAgICAgICBoNS5tYi00IEV2YWx1YWNpw7NuIGRlIGVzcGFjaW8uCiAgICAgICAgICAgICAgcC5tYi0wIEV2YWx1YXIgZWwgZXNwYWNpbyBkaXNwb25pYmxlIGVuIGxvcyBjdWFydG9zIHTDqWNuaWNvcyBwYXJhIGRldGVybWluYXIgbGEgY2FwYWNpZGFkIGRlIGV4cGFuc2nDs24uCiAgICAgICAgICAuY29sLWxnLTYubXktMgogICAgICAgICAgICAuYmc3LnAtNC5icmFkLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmltZy10Lm1iLTQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81MS5wbmcnIGFsdD0nJykKCiAgICAgICAgICAgICAgaDUubWItNCBJbnN0YWxhY2nDs24gZGUgbnVldm9zIGVxdWlwb3MuCiAgICAgICAgICAgICAgcC5tYi0wIEluc3RhbGFyIG51ZXZvcyBiYXN0aWRvcmVzLCBwYW5lbGVzIGRlIHBhcmNoZW8geSBvdHJvcyBlcXVpcG9zIGRlIHJlZCBwYXJhIHNvcG9ydGFyIGxhIGV4cGFuc2nDs24gZGUgbGEgaW5mcmFlc3RydWN0dXJhIGRlIHJlZC4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1zdGFydC5teS00CiAgICAgIC5jb2wtYXV0bwogICAgICAgIC5saXN0CiAgICAgICAgICAubGlzdF9faXRlbQogICAgICAgICAgICAubGlzdF9faXRlbV9faWNvbgogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL2ljb24uc3ZnJywgYWx0PScnKQogICAgICAgICAgLmxpc3RfX3R4dC5iZ2ljb24udGV4dC13aGl0ZS5wLTAucHgtNAogICAgICAgICAgICBoMy5tYi0xIEFjdHVhbGl6YWNpw7NuIGRlIGVxdWlwb3MgZGUgcmVkCgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5teS00CiAgICAgICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8uZmEtdWwKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIC5saXN0YS1vbC0tY3VhZHJvX192aW5ldGEKICAgICAgICAgICAgICAgICAgc3BhbiAxCiAgICAgICAgICAgICAgICBzcGFuICNbYiBFdmFsdWFjacOzbiBkZSByZW5kaW1pZW50bzpdIEV2YWx1YXIgZWwgcmVuZGltaWVudG8gZGUgbG9zIGVxdWlwb3MgZGUgcmVkIGV4aXN0ZW50ZXMgcGFyYSBkZXRlcm1pbmFyIHNpIGVzIG5lY2VzYXJpbyBhY3R1YWxpemFybG9zLgogICAgICAgICAgICAgIGhyCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICAubGlzdGEtb2wtLWN1YWRyb19fdmluZXRhCiAgICAgICAgICAgICAgICAgIHNwYW4gMgogICAgICAgICAgICAgICAgc3BhbiAjW2IgSW5zdGFsYWNpw7NuIGRlIG51ZXZvcyBlcXVpcG9zOl0gSW5zdGFsYXIgbnVldm9zIHN3aXRjaGVzLCByb3V0ZXJzIHkgb3Ryb3MgZXF1aXBvcyBkZSByZWQgcGFyYSBtZWpvcmFyIGVsIHJlbmRpbWllbnRvIHkgbGEgY2FwYWNpZGFkIGRlIGxhIGluZnJhZXN0cnVjdHVyYSBkZSByZWQuCiAgICAgICAgICAgICAgaHIgICAgICAgICAgICAgICAKICAgICAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTIucG5nJyBhbHQ9JycpIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LXN0YXJ0Lm15LTQKICAgICAgLmNvbC1hdXRvCiAgICAgICAgLmxpc3QKICAgICAgICAgIC5saXN0X19pdGVtCiAgICAgICAgICAgIC5saXN0X19pdGVtX19pY29uCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvaWNvbi5zdmcnLCBhbHQ9JycpCiAgICAgICAgICAubGlzdF9fdHh0LmJnaWNvbi50ZXh0LXdoaXRlLnAtMC5weC00CiAgICAgICAgICAgIGgzLm1iLTEgUGxhbmlmaWNhY2nDs24geSBjb29yZGluYWNpw7NuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAuYmcxLnAtNC5icmFkLmgtMTAwLmoxCiAgICAgICAgICBwLm1iLTAgI1tiIFBsYW5pZmljYWNpw7NuIGRlIHByb3llY3RvczpdIFBsYW5pZmljYXIgeSBjb29yZGluYXIgbGEgYW1wbGlhY2nDs24gZGUgc2lzdGVtYXMgcGFyYSBtaW5pbWl6YXIgbGFzIGludGVycnVwY2lvbmVzIGVuIGVsIHNlcnZpY2lvIGRlIHJlZC4gRXN0byBpbmNsdXllIGxhIHByb2dyYW1hY2nDs24gZGUgdHJhYmFqb3MgZGUgaW5zdGFsYWNpw7NuIHkgbGEgY29vcmRpbmFjacOzbiBjb24gbG9zIHByb3ZlZWRvcmVzIGRlIHNlcnZpY2lvcy4KCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81My5wbmcnIGFsdD0nJykgCgoKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgIC5iZzE2LnAtNC5icmFkLmgtMTAwLmoxCiAgICAgICAgICBwLm1iLTAgI1tiIFBydWViYXMgZGUgcmVuZGltaWVudG86XSBSZWFsaXphciBwcnVlYmFzIGRlIHJlbmRpbWllbnRvIGRlc3B1w6lzIGRlIGxhIGFtcGxpYWNpw7NuIHBhcmEgYXNlZ3VyYXIgcXVlIGxhIGluZnJhZXN0cnVjdHVyYSBkZSByZWQgY3VtcGxhIGNvbiBsb3MgZXN0w6FuZGFyZXMgZGUgY2FsaWRhZCB5IHJlbmRpbWllbnRvLgoK"},null]}